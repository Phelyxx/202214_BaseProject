{
	"info": {
		"_postman_id": "4d46615e-4597-48ab-8099-022529cb15c6",
		"name": "Product",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17534101"
	},
	"item": [
		{
			"name": "Add a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"product_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Asus Laptop\",\r\n   \"price\": 1799000,\r\n   \"type\": \"Non perishable\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products"
					]
				},
				"description": "This request returns the added resource."
			},
			"response": [
				{
					"name": "Add a product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Asus Laptop\",\r\n   \"price\": 1799000,\r\n   \"type\": \"Non perishable\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Add an unvalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"   pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The type is not valid\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Asus Laptop\",\r\n   \"price\": 1799000,\r\n   \"type\": \"NA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products"
					]
				},
				"description": "This request returns the added resource."
			},
			"response": [
				{
					"name": "Add an unvalid product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Asus Laptop\",\r\n   \"price\": 1799000,\r\n   \"type\": \"NA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of products > ' + 0, function () {\r",
							"   var data = pm.response.json()\r",
							"   pm.expect(data.length).to.greaterThan(0)\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products"
					]
				},
				"description": "This operation returns the resources requested."
			},
			"response": [
				{
					"name": "Get all products",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "[\r\n    {\r\n        \"id\": \"a1e7f3cc-a185-4ac4-9eb0-62200c0c609d\",\r\n        \"name\": \"Asus Laptop\",\r\n        \"price\": 1799000,\r\n        \"type\": \"Non perishable\",\r\n        \"stores\": []\r\n    }\r\n]"
				}
			]
		},
		{
			"name": "Get a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}"
					]
				},
				"description": "This operation returns the requested resource."
			},
			"response": [
				{
					"name": "Get a product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"id\": \"a1e7f3cc-a185-4ac4-9eb0-62200c0c609d\",\n    \"name\": \"Asus Laptop\",\n    \"price\": 1799000,\n    \"type\": \"Non perishable\",\n    \"stores\": []\n}"
				}
			]
		},
		{
			"name": "Get an unvalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "This request returns error because the resource does not exist."
			},
			"response": [
				{
					"name": "Get an unvalid product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Meat\",\r\n   \"price\": 20000,\r\n   \"type\": \"Perishable\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}"
					]
				},
				"description": "This operation returns the modified resource."
			},
			"response": [
				{
					"name": "Update a product",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Meat\",\r\n   \"price\": 20000,\r\n   \"type\": \"Perishable\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"name\": \"Meat\",\n    \"price\": 20000,\n    \"type\": \"Perishable\",\n    \"id\": \"4e32fded-9274-4f60-9334-6a9c9f6933b0\"\n}"
				}
			]
		},
		{
			"name": "Update an unvalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Meat\",\r\n   \"price\": 20000,\r\n   \"type\": \"Perishable\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "This request returns error because the resource does not exist."
			},
			"response": [
				{
					"name": "Update an unvalid product",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Meat\",\r\n   \"price\": 20000,\r\n   \"type\": \"Perishable\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}"
					]
				},
				"description": "This operation returns the code 204."
			},
			"response": [
				{
					"name": "Delete a product",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete an unvalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "This request returns error because the resource does not exist."
			},
			"response": [
				{
					"name": "Delete an unvalid product",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": " http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "{{product_id}}",
			"value": "",
			"type": "string"
		}
	]
}