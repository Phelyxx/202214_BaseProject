{
	"info": {
		"_postman_id": "a679ca4f-093d-4028-971f-3358a8b5173e",
		"name": "Products-Stores",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17534101"
	},
	"item": [
		{
			"name": "Add a store to a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id_1}}"
					]
				},
				"description": "This request returns the added resource."
			},
			"response": [
				{
					"name": "Add a store to a product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id_1}}"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"id\": \"447872c4-3b56-4320-8a9d-04831328a031\",\n    \"name\": \"Asus Laptop\",\n    \"price\": 1799000,\n    \"type\": \"Non perishable\",\n    \"stores\": [\n        {\n            \"id\": \"29b42748-078c-4505-9fc7-985677503c4f\",\n            \"name\": \"Alkosto\",\n            \"city\": \"BOG\",\n            \"address\": \"Ak 68 #72-43\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Add an invalid store to a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "This request returns error because the resource does not exist."
			},
			"response": [
				{
					"name": "Add an invalid store to a product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The store with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Add a store to an invalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{store_id_1}}"
					]
				},
				"description": "This request returns error because the resource does not exist."
			},
			"response": [
				{
					"name": "Add a store to an invalid product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores",
								"{{store_id_1}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get a store of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id_1}}"
					]
				},
				"description": "This operation returns the requested resource."
			},
			"response": [
				{
					"name": "Get a store of a product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id_1}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"id\": \"29b42748-078c-4505-9fc7-985677503c4f\",\n    \"name\": \"Alkosto\",\n    \"city\": \"BOG\",\n    \"address\": \"Ak 68 #72-43\"\n}"
				}
			]
		},
		{
			"name": "Get an invalid store of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "This request returns error because the resource does not exist."
			},
			"response": [
				{
					"name": "Get an invalid store of a product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The store with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get a store of an invalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{store_id_1}}"
					]
				},
				"description": "This request returns error because the resource does not exist."
			},
			"response": [
				{
					"name": "Get a store of an invalid product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores",
								"{{store_id_1}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get a store non-associated to a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id is not associated to the product\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id_2}}"
					]
				},
				"description": "This request returns error because the resource is not associated."
			},
			"response": [
				{
					"name": "Get a store non-associated to a product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id_2}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 412,\r\n   \"message\": \"The store with the given id is not associated to the product\"\r\n}"
				}
			]
		},
		{
			"name": "Get all stores of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				},
				"description": "This operation returns the list of resources."
			},
			"response": [
				{
					"name": "Get all stores of a product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "[\n    {\n        \"id\": \"29b42748-078c-4505-9fc7-985677503c4f\",\n        \"name\": \"Alkosto\",\n        \"city\": \"BOG\",\n        \"address\": \"Ak 68 #72-43\"\n    }\n]"
				}
			]
		},
		{
			"name": "Get all stores of an invalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores"
					]
				},
				"description": "This request returns error because the resource does not exist"
			},
			"response": [
				{
					"name": "Get all stores of an invalid product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update stores of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": \"{{store_id_2}}\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				},
				"description": "This operation returns the modified resource."
			},
			"response": [
				{
					"name": "Update stores of a product",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{store_id_2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"id\": \"447872c4-3b56-4320-8a9d-04831328a031\",\n    \"name\": \"Asus Laptop\",\n    \"price\": 1799000,\n    \"type\": \"Non perishable\",\n    \"stores\": [\n        {\n            \"id\": \"53676f7e-a2f2-4f42-a2ab-4c4d21d248c5\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Update invalid stores of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   },\r\n   {\r\n       \"id\": \"{{store_id_2}}\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				},
				"description": "This request returns error because the resource does not exist"
			},
			"response": [
				{
					"name": "Update invalid stores of a product",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   },\r\n   {\r\n       \"id\": \"{{store_id_2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The store with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update stores of an invalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": \"{{store_id_2}}\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores"
					]
				},
				"description": "This request returns error because the resource does not exist"
			},
			"response": [
				{
					"name": "Update stores of an invalid product",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{store_id_2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores"
							]
						}
					},
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a store of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id_2}}"
					]
				},
				"description": "This operation returns the code 204."
			},
			"response": [
				{
					"name": "Delete a store of a product",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id_2}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a store of an invalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{store_id_2}}"
					]
				},
				"description": "This request returns error because the resource does not exist"
			},
			"response": [
				{
					"name": "Delete a store of an invalid product",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id_2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores",
								"{{store_id_2}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete an invalid store of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "This request returns error because the resource does not exist"
			},
			"response": [
				{
					"name": "Delete an invalid store of a product",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The store with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a store non-associated to a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id is not associated to the product\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id_1}}"
					]
				},
				"description": "This request returns error because the resource is not associated."
			},
			"response": [
				{
					"name": "Delete a store non-associated to a product",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id_1}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The store with the given id is not associated to the product\"\n}"
				}
			]
		},
		{
			"name": "Add a store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"store_id_2\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Alkosto\",\r\n   \"city\": \"BOG\",\r\n   \"address\": \"Ak 68 #72-43\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"stores"
					]
				},
				"description": "This request returns the added resource."
			},
			"response": [
				{
					"name": "Add a store",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Alkosto\",\r\n   \"city\": \"BOG\",\r\n   \"address\": \"Ak 68 #72-43\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/stores",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Add a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"product_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Asus Laptop\",\r\n   \"price\": 1799000,\r\n   \"type\": \"Non perishable\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products"
					]
				},
				"description": "This request returns the added resource."
			},
			"response": [
				{
					"name": "Add a product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Asus Laptop\",\r\n   \"price\": 1799000,\r\n   \"type\": \"Non perishable\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": " http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "{{product_id}}",
			"value": "",
			"type": "string"
		},
		{
			"key": "{{store_id_1}}",
			"value": "",
			"type": "string"
		},
		{
			"key": "{{store_id_2}}",
			"value": "",
			"type": "string"
		}
	]
}